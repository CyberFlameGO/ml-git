name: MLGit-CI

on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

jobs:
  flake8:
    name: Flake8

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pip install flake8 pytest

      - name: Lint with flake8
        run: |
          flake8 .

  unit-tests:
    name: Unit Tests

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - uses: fusion-engineering/setup-git-credentials@v2
        with:
          credentials: 'https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/'

      - name: Configure Git Credentials for Tests
        run: |
            git config --global user.name $USER_NAME
            git config --global user.email $USER_EMAIL
            git config --global pull.rebase true
        env:
          USER_NAME: "MLGit"
          USER_EMAIL: "mlgit@mail.com"

      - name: Unit Tests
        run: |
          pipenv --python ${{ matrix.python-version }}
          chmod +x ./scripts/run_unit_tests.sh
          make test.unit
          mv .coverage .ut_coverage

      - name: Archive code coverage results of unit tests
        uses: actions/upload-artifact@v1
        with:
          name: ut-code-coverage-report
          path: .ut_coverage
        if: ${{ matrix.python-version == 3.6}}

  integration-tests:
    name: Integration Tests

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - uses: fusion-engineering/setup-git-credentials@v2
        with:
          credentials: 'https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/'

      - name: Configure Git Credentials for Tests
        run: |
            git config --global user.name $USER_NAME
            git config --global user.email $USER_EMAIL
            git config --global pull.rebase true
            mkdir ./tests/integration/credentials-json
        env:
          USER_NAME: "MLGit"
          USER_EMAIL: "mlgit@mail.com"

      - name: Create credentials.json file for Google Drive Tests
        uses: jsdaniell/create-json@1.1.2
        with:
          name: 'credentials.json'
          json: ${{ secrets.GDRIVE_CREDENTIALS_JSON }}
          dir: './tests/integration/credentials-json/'

      - name: Create credentials pickle file for Google Drive Tests
        uses: jsdaniell/create-json@1.1.2
        with:
          name: 'credentials'
          json: ${{ secrets.GDRIVE_CREDENTIALS }}
          dir: './tests/integration/credentials-json/'

      - name: Integration Tests
        run: |
          pipenv --python ${{ matrix.python-version }}
          chmod +x ./scripts/run_integration_tests.sh
          make test.integration.gdrive
          mv .coverage .it_coverage

      - name: Archive code coverage results of integration tests
        uses: actions/upload-artifact@v1
        with:
          name: it-code-coverage-report
          path: .it_coverage
        if: ${{ matrix.python-version == 3.6}}

  coverage:
    name: Coverage

    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: it-code-coverage-report

      - uses: actions/download-artifact@v2
        with:
          name: ut-code-coverage-report

      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: 3.6

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage

      - name: Generate combined coverage results
        run: |
          coverage combine .it_coverage .ut_coverage

      - name: Archive combined code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: combined-coverage-report
          path: .coverage
        if: ${{ always() }}
